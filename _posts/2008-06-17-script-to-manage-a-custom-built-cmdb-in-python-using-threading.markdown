---
layout: post
status: publish
published: true
title: Script to manage a custom built CMDB in Python using Threading
author:
  display_name: dynasty
  login: dynasty
  email: asanabria@linuxdynasty.org
  url: ''
author_login: dynasty
author_email: asanabria@linuxdynasty.org
excerpt: ! "<p><span class=\"dropcap\">T</span>his script was created so that you
  can query/insert/update a MySQL database based on Project/Site/Hostname/Cluster/Rack
  and Environment. You can also&nbsp; run multi threaded commands to the output of
  Project/Site/Hostname/Cluster/Rack and or Environment .</p>\r\n<p><strong><span
  class=\"attention\">For instance to run 1 command to 200 boxes took about 5 seconds,
  man you got to love that.</span>&nbsp;</strong></p>\r\n<p><span>             To
  update the CMDB... Usage: [ -u -c 'cluster' -d 'device' -s 'site' -p 'project' -e
  'environment'] <br />\r\n                example.. <font color=\"#0000ff\"><strong>cmdb-admin
  -u -d {hostname} -c {cluster} -s {site} -p {project} -r {rack} -e {environment}</strong></font><br
  />\r\n</span></p>\r\n<p><span>\t     To insert a new device in the CMDB... Usage:
  [-i -d 'device' -I 'ipaddr' -c 'cluster' -s 'site' -p 'project' -r 'rack' -e 'environment']<br
  />\r\n\t\texample.. <font color=\"#0000ff\"><strong>cmdb-admin -i -d {hostname}
  -I {ipaddress} -c {cluster} -s {site} -p {project} -r {rack} -e {environment}<br
  />\r\n</strong></font></span></p>\r\n<br />"
wordpress_id: 74
wordpress_url: http://linuxdynasty.org/?p=74
date: !binary |-
  MjAwOC0wNi0xNyAxOTozMDoyMSAtMDQwMA==
date_gmt: !binary |-
  MjAwOC0wNi0xNyAxOTozMDoyMSAtMDQwMA==
categories: []
tags:
- Python HowTo's
- Script to manage a custom built CMDB in Python using Threading
comments: []
---
<p><span class="dropcap">T</span>his script was created so that you can query/insert/update a MySQL database based on Project/Site/Hostname/Cluster/Rack and Environment. You can also&nbsp; run multi threaded commands to the output of Project/Site/Hostname/Cluster/Rack and or Environment .</p>
<p><strong><span class="attention">For instance to run 1 command to 200 boxes took about 5 seconds, man you got to love that.</span>&nbsp;</strong></p>
<p><span>             To update the CMDB... Usage: [ -u -c 'cluster' -d 'device' -s 'site' -p 'project' -e 'environment'] <br />
                example.. <font color="#0000ff"><strong>cmdb-admin -u -d {hostname} -c {cluster} -s {site} -p {project} -r {rack} -e {environment}</strong></font><br />
</span></p>
<p><span>	     To insert a new device in the CMDB... Usage: [-i -d 'device' -I 'ipaddr' -c 'cluster' -s 'site' -p 'project' -r 'rack' -e 'environment']<br />
		example.. <font color="#0000ff"><strong>cmdb-admin -i -d {hostname} -I {ipaddress} -c {cluster} -s {site} -p {project} -r {rack} -e {environment}<br />
</strong></font></span></p>
<p><a id="more"></a><a id="more-74"></a></p>
<p><span><br />
             To run a command to the different clusters/sites/projects/racks  Usage: [-c|-p|-s|-r|-d|-e -C '{command} [options of command] %s ' <br />
                example.. cmdb-admin -c {cluster} -C &quot;ping -c2 %s&quot; <br />
<font color="#0000ff"><strong>                          cmdb-admin -s {site} -C &quot;<font color="#ff0000">ssh %s 'echo hello'</font>&quot;</strong></font></p>
<p>             To query the CMDB.... Usage: [-d 'device' -q] (-v is optional)<br />
                example.. <font color="#0000ff"><strong>cmdb-admin -q -d {hostname} -v</strong></font></p>
<p>             To query the CMDB.... Usage: [-c {cluster} -q] (-v is optional)<br />
                example.. <font color="#0000ff"><strong>cmdb-admin -q -c {cluster} -v</strong></font></p>
<p>             To query the CMDB.... Usage: [-p 'project' -q] (-v is optional)<br />
                example.. <font color="#0000ff"><strong>cmdb-admin -q -p WEB -v</strong></font></p>
<p>             To query the CMDB.... Usage: [-s 'device' -q] (-v is optional)<br />
                example.. <font color="#0000ff"><strong>cmdb-admin -q -s {site} -v</strong></font></p>
<p>             To query the CMDB.... Usage: [-r 'device' -q] (-v is optional)<br />
                example.. <font color="#0000ff"><strong>cmdb-admin -q -r {rack} -v</strong></font></span></p>
<p><u><font color="#000000"><span><strong>Enjoy the script below!</strong></span></font></u></p>
<p>&nbsp;</p>
<pre>#!/bin/env python<br /><span><br />#Copyright (C) 2008  Allen Sanabria<br /><br />#This program is free software; you can redistribute it and/or modify<br />#it under the terms of the GNU General Public License as published by<br />#the Free Software Foundation; either version 2 of the License, or<br />#(at your option) any later version.<br /><br />#This program is distributed in the hope that it will be useful,<br />#but WITHOUT ANY WARRANTY; without even the implied warranty of<br />#MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the<br />#GNU General Public License for more details.<br /><br />#You should have received a copy of the GNU General Public License along<br />#with this program; if not, write to the Free Software Foundation, Inc.,<br />#51 Franklin Street, Fifth Floor, Boston, MA 02110-1301 USA.</span><br />##################################################################<br />#Created by Allen Sanabria aka LinuxDynasty aka PrNino69<br />#This program will update/query/and even execute commands based<br />#on which cluster/project/site/ or rack you want to run it against<br />#completed, Thursday 21st 2008<br />##################################################################<br /><br />import sys, os, MySQLdb, getopt, re, string, threading<br />from time import sleep, ctime<br /><br />mydb =  'CMDB'<br />db_user = 'master'<br />db_passwd = 'paswd'<br />host_db = 'mysql_master'<br /><br />try:<br />  Con = MySQLdb.connect(host=host_db, port=3306, user=db_user, passwd=db_passwd, db=mydb)<br />except Exception, e:<br />  print e<br />else:<br />  Cursor = Con.cursor(  )<br /><br /><br />def main(args):<br />  if insert:<br />    mysql_insert()<br />  elif device and cluster and project and site and update and rack and env:<br />    mysql_update()<br />  elif device and query or cluster and query or site and query or project and query or rack<br />       and query or env and query or device and command or cluster and command or site<br />       and command or project and command or rack and command or env and command:<br />    mysql_query()<br />  elif help:<br />    usage(0)<br />  else:<br />    usage(0)<br /><br />def mysql_insert():<br />  i_sql = &quot;INSERT into host_info (host_id,host_name,ip_address,rack_info,site_name,cluster_name,project,environ) <br />           VALUES (NULL,'%s','%s','%s','%s','%s','%s','%s')&quot; % (device, ipaddr, rack, site, cluster, project,env)<br />  Cursor.execute(i_sql)<br />  Con.close(  )<br />    <br />def mysql_update():<br />  u_sql = &quot;UPDATE host_info SET cluster_name = '%s', site_name = '%s', project = '%s', rack_info = '%s',  environ = '%s'<br />           where (host_name LIKE &quot;%s&quot;)&quot; % (cluster, site, project, rack, env, device1)<br />  Cursor.execute(u_sql)<br />  Con.close(  )<br /><br />class cmdb_command(threading.Thread):<br />  def __init__(self, func, args, name=''):<br />    threading.Thread.__init__( self )<br />    self.name = name<br />    self.func = func<br />    self.args = args<br /><br />  def run(self):<br />    apply(self.func, self.args)<br /><br />def cmdb_exec(host, nu_cmd):<br />#  print host + &quot; started &quot;, ctime()<br />  os.system(nu_cmd)<br />#  print host + &quot; finished &quot;, ctime() +&quot;n&quot;<br /><br />  <br />def mysql_query():<br />  column = None<br />  s_query = None<br />  if project:<br />    column = &quot;project&quot;<br />    s_query = project<br />  elif cluster:<br />    column = &quot;cluster_name&quot;<br />    s_query = cluster<br />  elif site:<br />    column = &quot;site_name&quot;<br />    s_query = site<br />  elif rack:<br />    column = &quot;rack_info&quot;<br />    s_query = rack<br />  elif device:<br />    column = &quot;host_name&quot;<br />    s_query = device1<br />  elif env:<br />    column = &quot;environ&quot;<br />    s_query = env<br /><br /><br />  perc= &quot;%&quot;<br />  sql = &quot;SELECT host_name, ip_address, rack_info, cluster_name, site_name, project, environ FROM host_info <br />         where (%s LIKE &quot;%s&quot;)&quot; % (column, s_query)<br />  Cursor.execute(sql)<br />  Results = Cursor.fetchall(  )<br />  Con.close(  )<br />  if len(Results) == 0:<br />    print &quot;Device &quot; + device + &quot; does not exist!&quot;<br />    exit<br />  if command:<br />    threads = []<br />    nloops = range(len(Results))<br />    started_time = ctime()<br />    print &quot;STARTING HERE&quot;, ctime()<br />    for host in Results:<br />      nu_cmd = command % (host[0])<br />      after = cmdb_command(cmdb_exec, (host[0], nu_cmd), cmdb_exec.__name__)<br />      threads.append(after)<br />    for i in nloops:<br />      threads[i].start()<br />    for i in nloops:<br />      threads[i].join()<br />    ended_time = ctime()<br />    print &quot;ENDING HERE&quot;, ctime()<br />    print &quot;The time this program started &quot; + started_time + &quot; and the time this program ended &quot; + ended_time<br />  else:<br />    query_print(Results)<br /><br />def query_print(Results):<br />    i = 0<br />    for line in Results:<br />      try:<br />        if verbose:<br />          print &quot;Hostname = &quot; + Results[i][0] + &quot;, Ipaddress = &quot; +Results[i][1] + &quot;, <br />                 Rack = &quot; +Results[i][2] + &quot;, Cluster = &quot; + Results[i][3] + &quot;,<br />                 Site = &quot; + Results[i][4] + &quot;, Project = &quot; + Results[i][5] + &quot;,<br />                 Environment = &quot; +Results[i][6]<br />        else:<br />          print Results[i][0]<br />      except IndexError, e:<br />        nondevice = &quot;Device &quot; + device + &quot; Does not exist&quot;<br />        raise nondevice<br />      i += 1<br />  <br />def usage(code=0):<br />  <br />  print &quot;&quot;&quot;<br />          To update the CMDB... <br />          Usage: [ -u -c 'cluster' -d 'device' -s 'site' -p 'project' -e 'environment'] <br />          example.. <br />          cmdb-admin -u -d {hostname} -c {cluster} -s {site} -p {project} -r {rack} -e {environment}<br />	  <br />          To insert a new device in the CMDB... <br />	  Usage: [-i -d 'device' -I 'ipaddr' -c 'cluster' -s 'site' -p 'project' -r 'rack' -e 'environment']<br />	  example.. <br />          cmdb-admin -i -d {hostname} -I {ipaddress} -c {cluster} -s {site} -p {project} -r {rack} -e {environment}<br /><br />          To run a command to the different clusters/sites/projects/racks  <br />          Usage: [-c|-p|-s|-r|-d|-e -C '{command} [options of command] %s ' <br />          example.. <br />          cmdb-admin -c {cluster} -C &quot;ping -c2 %s&quot; <br />          cmdb-admin -s {site} -C &quot;ssh %s 'echo hello'&quot;<br /><br />          To query the CMDB.... <br />          Usage: [-d 'device' -q] (-v is optional)<br />          example.. cmdb-admin -q -d {hostname} -v<br /><br />          To query the CMDB.... <br />          Usage: [-c {cluster} -q] (-v is optional)<br />          example.. <br />          cmdb-admin -q -c {cluster} -v<br /><br />          To query the CMDB.... <br />          Usage: [-p 'project' -q] (-v is optional)<br />          example.. <br />          cmdb-admin -q -p WEB -v<br /><br />          To query the CMDB.... <br />          Usage: [-s 'device' -q] (-v is optional)<br />          example.. <br />          cmdb-admin -q -s {site} -v<br /><br />          To query the CMDB.... <br />          Usage: [-r 'device' -q] (-v is optional)<br />          example.. <br />          cmdb-admin -q -r {rack} -v<br />    <br />    -c, --cluster=      what cluster is it part of... example<br />    -C, --command=      what command to run<br />    -d, --device=       name of device<br />    -s, --site=	        what site is it part of..<br />    -p, --project=      What project is it part of<br />    -r, --rack=         What rack the device is located in<br />    -e, --env=		environment<br />    -u, --update        update mode<br />    -i, --insert        insert mode<br />    -I, --ipaddr        IP Address of device<br />    -q, --query         query mode<br />    -h, --help          This help message <br />    -v, --verbose       Added verbosity    <br /><br />    &quot;&quot;&quot;<br /><br />try:<br />  opts, args = getopt.getopt(sys.argv[1:], &quot;d:c:p:s:r:e:C:I:hvuqi&quot;,<br />  [ 'device=', 'cluster=', 'command=', 'site=', 'project=', 'rack=', <br />    'ipaddr=', 'env=', 'help', 'update', 'query', 'insert', 'verbose' ]<br />  )<br />except getopt.error:<br />  usage(0)<br /><br />help = verbose = cluster = site = project = rack = device = env = query = update = command = insert = ipaddr = None<br />for opt, val in opts:<br />  if opt in ('-v', '--verbose'):<br />    verbose = True<br />  if opt in ('-q', '--query'):<br />    query = True<br />  if opt in ('-u', '--update'):<br />    update = True<br />  if opt in ('-i', '--insert'):<br />    insert = True<br />  if opt in ('-d', '--device'):<br />    device = val<br />    device1 = device + &quot;.%&quot;<br />  if opt in ('-p', '--project'):<br />    project = val<br />  if opt in ('-c', '--cluster'):<br />    cluster = val<br />  if opt in ('-s', '--site'):<br />    site = val<br />  if opt in ('-r', '--rack'):<br />    rack = val<br />  if opt in ('-e', '--env'):<br />    env = val<br />  if opt in ('-C', '--command'):<br />    command = val<br />  if opt in ('-I', '--ipaddr'):<br />    ipaddr = val<br /><br />if __name__ == &quot;__main__&quot;:<br />   main(sys.argv[1:])<br /></pre>
<p>&nbsp;</p>
