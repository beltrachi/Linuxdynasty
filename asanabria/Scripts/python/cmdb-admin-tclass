#!/bin/env python
##################################################################
#Created by Allen Sanabria aka LinuxDynasty aka PrNino69
#This program will update/query/and even execute commands based
#on which cluster/project/site/ or rack you want to run it against
#This program contains threading Class... :)
#completed, Thursday Feb 25th 2008
##################################################################

import sys, os, MySQLdb, getopt, re, string, threading
from time import sleep, ctime

mydb =  'test'
db_user = 'test'
db_passwd = 'test'
host_db = 'test'

try:
  Con = MySQLdb.connect(host=host_db, port=3306, user=db_user, passwd=db_passwd, db=mydb)
except Exception, e:
  print e
else:
  Cursor = Con.cursor(  )


def main(args):
  if device and cluster and project and site and update and rack:
    mysql_update()
  elif device and query or cluster and query or site and query or project and query or rack and query or device and command or cluster and command or site and command or project and command or rack and command:
    mysql_query()
  elif help:
    usage(0)
  else:
    usage(0)


def mysql_update():
  sql = "UPDATE host_info SET cluster_name = '%s', site_name = '%s', project = '%s', rack_info = '%s' where (host_name LIKE \"%s\")" % (cluster, site, project, rack, device1)
  Cursor.execute(sql)
  Con.close(  )

class cmdb_command(threading.Thread):
  def __init__(self, func, args, name=''):
    threading.Thread.__init__( self )
    self.name = name
    self.func = func
    self.args = args

  def run(self):
    apply(self.func, self.args)

def cmdb_exec(host, nu_cmd):
#  print host + " started ", ctime()
  os.system(nu_cmd)
#  print host + " finished ", ctime() +"\n"

  
def mysql_query():
  column = None
  s_query = None
  if project:
    column = "project"
    s_query = project
  elif cluster:
    column = "cluster_name"
    s_query = cluster
  elif site:
    column = "site_name"
    s_query = site
  elif rack:
    column = "rack_info"
    s_query = rack
  elif device:
    column = "host_name"
    s_query = device1

  sql = "SELECT host_name, ip_address, rack_info, cluster_name, site_name, project FROM host_info where (%s LIKE \"%s\")" % (column, s_query)
  Cursor.execute(sql)
  Results = Cursor.fetchall(  )
  Con.close(  )
  if command:
    threads = []
    nloops = range(len(Results))
    started_time = ctime()
    print "STARTING HERE", ctime()
    for host in Results:
      nu_cmd = command % (host[0])
      after = cmdb_command(cmdb_exec, (host[0], nu_cmd), cmdb_exec.__name__)
      threads.append(after)
    
    for i in nloops:
      threads[i].start()
    for i in nloops:
      threads[i].join()
    ended_time = ctime()
    print "ENDING HERE", ctime()
    print "The time this program started " + started_time + " and the time this program ended " + ended_time
  else:
    query_print(Results)

def query_print(Results):
    i = 0
    for line in Results:
      try:
        if verbose:
          print "Hostname = " + Results[i][0] + ", Ipaddress = " +Results[i][1] + ", Rack = " +Results[i][2] + ", Cluster = " + Results[i][3] + ", Site = " + Results[i][4] + ", Project = " + Results[i][5]
        else:
          print Results[i][0]
      except IndexError, e:
        nondevice = "Device " + device + " Does not exist"
        raise nondevice
      i += 1
  
def usage(code=0):
  
  print """
             \n To update the CMDB... Usage: [-c 'cluster' -d 'device' -s 'site' -p 'project' -u] 
                example.. cmdb-admin -u -d cc16-22 -c zenmysql -s SYSTEMS -p ZENOSS -r Rack_22
             \n To run a command to the different clusters/sites/projects/racks  Usage: [-c|-p|-s|-r|-d -C '{command} [options of command] %s '
                example.. cmdb-admin -c bp-www -C "ping -c2 %s" 
             \n To update the CMDB... Usage: [-c 'cluster' -d 'device' -s 'site' -p 'project' -u] 
                example.. cmdb-admin -u -d cc16-22 -c zenmysql -s SYSTEMS -p ZENOSS -r Rack_22
             \n To run a command to the different clusters/sites/projects/racks  Usage: [-c|-p|-s|-r|-d -C '{command} [options of command] %s ' 
                example.. cmdb-admin -c bp-www -C "ping -c2 %s" 
                          cmdb-admin -s BP -C "ssh %s 'echo hello'"
             \n To query the CMDB.... Usage: [-d 'device' -q] (-v is optional)
                example.. cmdb-admin -q -d cc16-22 -v
             \n To query the CMDB.... Usage: [-c 'cluster' -q] (-v is optional)
                example.. cmdb-admin -q -c bp-www -v
             \n To query the CMDB.... Usage: [-p 'project' -q] (-v is optional)
                example.. cmdb-admin -q -p WEB -v
             \n To query the CMDB.... Usage: [-s 'device' -q] (-v is optional)
                example.. cmdb-admin -q -s BP -v
             \n To query the CMDB.... Usage: [-r 'device' -q] (-v is optional)
                example.. cmdb-admin -q -r Rack_22 -v
    
    -c, --cluster=      what cluster is it part of... example (bp-www, mg-www)
    -C, --command=      what command to run
    -d, --device=       name of device
    -s, --site=	       what site is it part of... example (BP, AZ, MG, FB, GL)
    -p, --project=      What project is it part of... example (WEB, DB, ZENOSS)
    -r, --rack=         What rack the device is located in.. example (Rack_0, Rack_1)
    -u, --update       update mode
    -q, --query        query mode
    -h, --help         This help message 
    -v, --verbose      Added verbosity    

    """

try:
  opts, args = getopt.getopt(sys.argv[1:], "d:c:p:s:r:C:hvuq",
  [ 'device=', 'cluster=', 'command=', 'site=', 'project=', 'rack=', 'help', 'update', 'query', 'verbose' ]
  )
except getopt.error:
  usage(0)

help = verbose = cluster = site = project = rack = device = query = update = command = None
for opt, val in opts:
  if opt in ('-v', '--verbose'):
    verbose = True
  if opt in ('-q', '--query'):
    query = True
  if opt in ('-u', '--update'):
    update = True
  if opt in ('-d', '--device'):
    device = val
    device1 = device + ".%"
  if opt in ('-p', '--project'):
    project = val
  if opt in ('-c', '--cluster'):
    cluster = val
  if opt in ('-s', '--site'):
    site = val
  if opt in ('-r', '--rack'):
    rack = val
  if opt in ('-C', '--command'):
    command = val
  if opt in ('-h', '--help'):
    usage(0)

if __name__ == "__main__":
   main(sys.argv[1:])
